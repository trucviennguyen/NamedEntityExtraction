/* 
 *  all_other_lexica.jape
 *  Copyright 2004-2006 Truc Vien, HCMUT.
 */

Phase:	All_Other_Lexica
Input: Lookup Token
Options: control = appelt debug = no

///////////////////////////////////////////////////////////////////
// Lexical resources of Absstract and Event
///////////////////////////////////////////////////////////////////

Rule: Error
Priority: 1000
(
   {Token.orth == lowercase}
)
:error
-->
{}


Rule:  NLHTTN
Priority: 100
// Ngữ liệu Hiện tượng tự nhiên
(
      {Lookup.class == "http://www.dit.hcmut.edu.vn/vnkim/vnkimo.rdfs#Ngữ_liệu_Hiện_tượng_tự_nhiên"}
):lr
-->
{
	gate.AnnotationSet lrSet = (gate.AnnotationSet)bindings.get("lr");
	gate.Annotation lrAnn = (gate.Annotation)lrSet.iterator().next();
	gate.FeatureMap features = Factory.newFeatureMap();
	String clas = (String)lrAnn.getFeatures().get("class");
	features.put("class", clas);

	// Remove all annotations inside
	Long extendStart = lrAnn.getStartNode().getOffset();
	Long extendEnd = lrAnn.getEndNode().getOffset();

	gate.AnnotationSet tempSet;
	java.util.HashSet remSet = null;

	tempSet = (gate.AnnotationSet)annotations.getContained(extendStart, extendEnd);
	remSet = new java.util.HashSet();

	Iterator remIter = tempSet.iterator();
	while (remIter.hasNext())
	{
		Annotation ann = (Annotation)remIter.next();
		if (ann.getType().equalsIgnoreCase("Token") || ann.getType().equalsIgnoreCase("SpaceToken") || ann.getType().equalsIgnoreCase("Split") 
		|| (ann.getType().equalsIgnoreCase("Upper") && (extendStart.intValue() < ann.getStartNode().getOffset().intValue() 
		|| ann.getEndNode().getOffset().intValue() < extendEnd.intValue())))
			remSet.add(ann);
	}
	if (remSet != null && remSet.size() > 0) tempSet.removeAll(remSet);
	if (tempSet != null && tempSet.size() > 0) annotations.removeAll(tempSet);

	features.put("rule", "NLHTTN");
	annotations.add(lrSet.firstNode(), lrSet.lastNode(), "NLHTTN", features);
}


Rule:  NLBC
Priority: 100
// Ngữ liệu Biến cố
(
      {Lookup.class == "http://www.dit.hcmut.edu.vn/vnkim/vnkimo.rdfs#Ngữ_liệu_Biến_cố"}
):lr
-->
{
	gate.AnnotationSet lrSet = (gate.AnnotationSet)bindings.get("lr");
	gate.Annotation lrAnn = (gate.Annotation)lrSet.iterator().next();
	gate.FeatureMap features = Factory.newFeatureMap();
	String clas = (String)lrAnn.getFeatures().get("class");
	features.put("class", clas);

	// Remove all annotations inside
	Long extendStart = lrAnn.getStartNode().getOffset();
	Long extendEnd = lrAnn.getEndNode().getOffset();

	gate.AnnotationSet tempSet;
	java.util.HashSet remSet = null;

	tempSet = (gate.AnnotationSet)annotations.getContained(extendStart, extendEnd);
	remSet = new java.util.HashSet();

	Iterator remIter = tempSet.iterator();
	while (remIter.hasNext())
	{
		Annotation ann = (Annotation)remIter.next();
		if (ann.getType().equalsIgnoreCase("Token") || ann.getType().equalsIgnoreCase("SpaceToken") || ann.getType().equalsIgnoreCase("Split") 
		|| (ann.getType().equalsIgnoreCase("Upper") && (extendStart.intValue() < ann.getStartNode().getOffset().intValue() 
		|| ann.getEndNode().getOffset().intValue() < extendEnd.intValue())))
			remSet.add(ann);
	}
	if (remSet != null && remSet.size() > 0) tempSet.removeAll(remSet);
	if (tempSet != null && tempSet.size() > 0) annotations.removeAll(tempSet);

	features.put("rule", "NLBC");
	annotations.add(lrSet.firstNode(), lrSet.lastNode(), "NLBC", features);
}


