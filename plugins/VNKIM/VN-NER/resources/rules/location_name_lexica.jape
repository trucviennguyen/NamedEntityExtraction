/*
 *  location_name_lexica.jape
 *  Copyright 2004-2006 Truc Vien, HCMUT.
 */

Phase:	Location_Name_Lexica
Input: Lookup
Options: control = brill debug = no

///////////////////////////////////////////////////////////////////
// Location Rules
///////////////////////////////////////////////////////////////////

Rule:  NLNC
// Ngữ liệu nơi chốn
(
      {Lookup.class == "http://www.dit.hcmut.edu.vn/vnkim/vnkimo.rdfs#Ngữ_liệu_Nơi_chốn"}
):nlnc
-->
{
	gate.AnnotationSet lrSet = (gate.AnnotationSet)bindings.get("nlnc");
	gate.Annotation lrAnn = (gate.Annotation)lrSet.iterator().next();
	gate.FeatureMap features = Factory.newFeatureMap();
	String clas = (String)lrAnn.getFeatures().get("class");
	features.put("class", clas);

	// Remove all annotations inside
	Long extendStart = lrAnn.getStartNode().getOffset();
	Long extendStart2 = new Long(lrAnn.getStartNode().getOffset().longValue() + 1);

	Long extendEnd = lrAnn.getEndNode().getOffset();
	Long extendEnd2 = new Long(lrAnn.getEndNode().getOffset().longValue() - 1);

	// Remove all annotations inside
	gate.AnnotationSet tempSet;
	if (extendStart.intValue() <= extendEnd2.intValue())
	{
		tempSet = (gate.AnnotationSet)annotations.getContained(extendStart, extendEnd2);

		Iterator remIter = tempSet.iterator();
		while (remIter.hasNext())
		{
			Annotation ann = (Annotation)remIter.next();
			if (ann.getType().equalsIgnoreCase("Token") || ann.getType().equalsIgnoreCase("SpaceToken") 
			|| ann.getType().equalsIgnoreCase("Split"))
			{
				tempSet.remove(ann);
				remIter = tempSet.iterator();
			}
		}
		if (tempSet != null && tempSet.size() > 0) annotations.removeAll(tempSet);
	}

	if (extendStart2.intValue() <= extendEnd.intValue())
	{
		tempSet = (gate.AnnotationSet)annotations.getContained(extendStart2, extendEnd);

		Iterator remIter = tempSet.iterator();
		while (remIter.hasNext())
		{
			Annotation ann = (Annotation)remIter.next();
			if (ann.getType().equalsIgnoreCase("Token") || ann.getType().equalsIgnoreCase("SpaceToken") 
			|| ann.getType().equalsIgnoreCase("Split"))
			{
				tempSet.remove(ann);
				remIter = tempSet.iterator();
			}
		}
		if (tempSet != null && tempSet.size() > 0) annotations.removeAll(tempSet);
	}

	if (vnkim.database.VNQueryAPI.isSubClassOf(clas, "http://www.dit.hcmut.edu.vn/vnkim/vnkimo.rdfs#Ngữ_liệu_Đơn_vị_hành_chính")
	|| vnkim.database.VNQueryAPI.isSubClassOf(clas, "http://www.dit.hcmut.edu.vn/vnkim/vnkimo.rdfs#Ngữ_liệu_Thành_phố"))
		features.put("kind", "DVHC");

	String st = doc.getContent().toString().substring(lrSet.firstNode().getOffset().intValue(), lrSet.lastNode().getOffset().intValue());

	if (vnkim.database.VNQueryAPI.isSubClassOf(clas, "http://www.dit.hcmut.edu.vn/vnkim/vnkimo.rdfs#Ngữ_liệu_Đường_bộ")
	|| clas.equals("http://www.dit.hcmut.edu.vn/vnkim/vnkimo.rdfs#Ngữ_liệu_Quận")
	|| clas.equals("http://www.dit.hcmut.edu.vn/vnkim/vnkimo.rdfs#Ngữ_liệu_Phường")
	|| clas.equals("http://www.dit.hcmut.edu.vn/vnkim/vnkimo.rdfs#Ngữ_liệu_Xã")
	|| st.equalsIgnoreCase("Ấp") || st.equalsIgnoreCase("Thôn"))
		features.put("combine", "number");


	features.put("rule", "NLNC");
	annotations.add(lrSet.firstNode(), lrSet.lastNode(), "NLNC", features);
}


