/*
 *  remove_entity_insideLR.jape
 *  Copyright 2004-2006 Truc Vien, HCMUT.
 */

Phase:	Remove_Entity_InsideLR
Input: LR_TempPerson LR_TempLocation LR_TempOrganization
Options: control = appelt debug = no


///////////////////////////////////////////////////////////////////
// Person Rules
///////////////////////////////////////////////////////////////////

/* Đối với mỗi thực thể TempPerson có dạng đầy đủ (vd. có tiền tố công ty hay loại hình công ty), 
 * loại bỏ tất cả các chú giải TempPerson và TempPerson trùng một phần hay toàn phần
 */

Rule:	Remove_InsideLR_Person
Priority: 145
(
   {LR_TempPerson}
)
:personName
-->
{
	gate.AnnotationSet personSet = (gate.AnnotationSet)bindings.get("personName");
	gate.Annotation personAnn = (gate.Annotation)personSet.iterator().next();

	// Remove all annotations inside
	Long extendStart = personAnn.getStartNode().getOffset();
	Long extendEnd = personAnn.getEndNode().getOffset();

	String pure = doc.getContent().toString().substring(extendStart.intValue(), extendEnd.intValue());

	gate.AnnotationSet tempSet = (gate.AnnotationSet)annotations.getContained(extendStart, extendEnd);

	Iterator remIter = tempSet.iterator();
	java.util.HashSet remSet = new java.util.HashSet();

	while (remIter.hasNext())
	{
		Annotation ann = (Annotation)remIter.next();

		Long extendStart1 = ann.getStartNode().getOffset();
		Long extendEnd1 = ann.getEndNode().getOffset();

		if (ann.getType().equalsIgnoreCase("Thực_thể"))
			remSet.add(ann);
	}
	if (remSet != null && remSet.size() > 0) annotations.removeAll(remSet);
}



///////////////////////////////////////////////////////////////////
// Location Rules
///////////////////////////////////////////////////////////////////

/* Đối với mỗi thực thể TempLocation có dạng đầy đủ (vd. có tiền tố công ty hay loại hình công ty), 
 * loại bỏ tất cả các chú giải TempPerson và TempLocation trùng một phần hay toàn phần
 */

Rule:	Remove_InsideLR_Location
Priority: 145
(
   {LR_TempLocation}
)
:locName
-->
{
	gate.AnnotationSet locSet = (gate.AnnotationSet)bindings.get("locName");
	gate.Annotation locAnn = (gate.Annotation)locSet.iterator().next();

	// Remove all annotations inside
	Long extendStart = locAnn.getStartNode().getOffset();
	Long extendEnd = locAnn.getEndNode().getOffset();

	String pure = doc.getContent().toString().substring(extendStart.intValue(), extendEnd.intValue());

	gate.AnnotationSet tempSet = (gate.AnnotationSet)annotations.getContained(extendStart, extendEnd);

	Iterator remIter = tempSet.iterator();
	java.util.HashSet remSet = new java.util.HashSet();

	while (remIter.hasNext())
	{
		Annotation ann = (Annotation)remIter.next();

		Long extendStart1 = ann.getStartNode().getOffset();
		Long extendEnd1 = ann.getEndNode().getOffset();

		if (ann.getType().equalsIgnoreCase("Thực_thể"))
			remSet.add(ann);
	}
	if (remSet != null && remSet.size() > 0) annotations.removeAll(remSet);
}


///////////////////////////////////////////////////////////////////
// Organization Rules
///////////////////////////////////////////////////////////////////

/* Đối với mỗi thực thể TempOrganization có dạng đầy đủ (vd. có tiền tố công ty hay loại hình công ty), 
 * loại bỏ tất cả các chú giải TempPerson và TempLocation trùng một phần hay toàn phần
 */

Rule:	Remove_InsideLR_Organization
Priority: 145
(
   {LR_TempOrganization}
)
:orgName
-->
{
	gate.AnnotationSet orgSet = (gate.AnnotationSet)bindings.get("orgName");
	gate.Annotation orgAnn = (gate.Annotation)orgSet.iterator().next();

	// Remove all annotations inside
	Long extendStart = orgAnn.getStartNode().getOffset();
	Long extendEnd = orgAnn.getEndNode().getOffset();

	String pure = doc.getContent().toString().substring(extendStart.intValue(), extendEnd.intValue());

	gate.AnnotationSet tempSet = (gate.AnnotationSet)annotations.getContained(extendStart, extendEnd);

	Iterator remIter = tempSet.iterator();
	java.util.HashSet remSet = new java.util.HashSet();

	while (remIter.hasNext())
	{
		Annotation ann = (Annotation)remIter.next();

		Long extendStart1 = ann.getStartNode().getOffset();
		Long extendEnd1 = ann.getEndNode().getOffset();

		if (ann.getType().equalsIgnoreCase("Thực_thể"))
			remSet.add(ann);
	}
	if (remSet != null && remSet.size() > 0) annotations.removeAll(remSet);
}


