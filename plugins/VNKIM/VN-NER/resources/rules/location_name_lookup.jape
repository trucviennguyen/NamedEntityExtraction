/*
 *  location_name_lookup.jape
 *  Copyright 2004-2006 Truc Vien, HCMUT.
 */

Phase:	Location_Name_Lookup
Input: Lookup
Options: control = brill debug = no

///////////////////////////////////////////////////////////////////
// Location Rules
///////////////////////////////////////////////////////////////////

Rule:	RawLocation
Priority: 1000
(
   {Lookup.class == "http://www.dit.hcmut.edu.vn/vnkim/vnkimo.rdfs#Nơi_chốn"}
)
:locName
-->
{
	// create an annotation set consisting of all the annotations for locName
	gate.AnnotationSet locSet = (gate.AnnotationSet)bindings.get("locName");
	gate.Annotation locAnn = (gate.Annotation)locSet.iterator().next();

	gate.FeatureMap features = locAnn.getFeatures();

	String pure = doc.getContent().toString().substring(locAnn.getStartNode().getOffset().intValue(), locAnn.getEndNode().getOffset().intValue());
	features.put("originalName", pure);

	// Remove all annotations inside
	Long extendStart = locAnn.getStartNode().getOffset();
	Long extendStart2 = new Long(locAnn.getStartNode().getOffset().longValue() + 1);

	Long extendEnd = locAnn.getEndNode().getOffset();
	Long extendEnd2 = new Long(locAnn.getEndNode().getOffset().longValue() - 1);

	gate.AnnotationSet tempSet;
	java.util.HashSet remSet = null;

	if (extendStart.intValue() <= extendEnd2.intValue())
	{
		tempSet = (gate.AnnotationSet)annotations.getContained(extendStart, extendEnd2);
		remSet = new java.util.HashSet();

		Iterator remIter = tempSet.iterator();
		while (remIter.hasNext())
		{
			Annotation ann = (Annotation)remIter.next();
			if (ann.getType().equalsIgnoreCase("Token") || ann.getType().equalsIgnoreCase("SpaceToken") 
			|| ann.getType().equalsIgnoreCase("Split") || ann.getType().equalsIgnoreCase("Upper"))
				remSet.add(ann);
		}
		if (remSet != null && remSet.size() > 0) tempSet.removeAll(remSet);
		if (tempSet != null && tempSet.size() > 0) annotations.removeAll(tempSet);
	}

	if (extendStart2.intValue() <= extendEnd.intValue())
	{
		tempSet = (gate.AnnotationSet)annotations.getContained(extendStart2, extendEnd);
		remSet = new java.util.HashSet();

		Iterator remIter = tempSet.iterator();
		while (remIter.hasNext())
		{
			Annotation ann = (Annotation)remIter.next();
			if (ann.getType().equalsIgnoreCase("Token") || ann.getType().equalsIgnoreCase("SpaceToken") 
			|| ann.getType().equalsIgnoreCase("Split") || ann.getType().equalsIgnoreCase("Upper"))
				remSet.add(ann);
		}

		if (remSet != null && remSet.size() > 0) tempSet.removeAll(remSet);
		if (tempSet != null && tempSet.size() > 0) annotations.removeAll(tempSet);
	}

	// create some new features
	String clas = (String)locAnn.getFeatures().get("class");
	if (vnkim.database.VNQueryAPI.isSubClassOf(clas, "http://www.dit.hcmut.edu.vn/vnkim/vnkimo.rdfs#Đơn_vị_hành_chính")
	|| vnkim.database.VNQueryAPI.isSubClassOf(clas, "http://www.dit.hcmut.edu.vn/vnkim/vnkimo.rdfs#Thành_phố")
	|| vnkim.database.VNQueryAPI.isSubClassOf(clas, "http://www.dit.hcmut.edu.vn/vnkim/vnkimo.rdfs#Tỉnh"))
		features.put("spec", "DVHC");

	features.put("kind", "locationName");
	features.put("rule", "RawLocation");

	// create a TempLoc annotation and add the features we've created
	annotations.add(locSet.firstNode(), locSet.lastNode(), "TempLocation", features);
}
