/* ParseCpsl.jj - parser for CPSL grammars
   Hamish, 8/7/98

   Modifications by Luc Plamondon, Université de Montréal, 20/11/03:
   - Replaced <equals> token by <attrOp>, which can be ==, !=, etc.

   $Id$
 */

options {
  CACHE_TOKENS = true;
  IGNORE_CASE = false;
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
  LOOKAHEAD = 1;
  FORCE_LA_CHECK = false;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_LOOKAHEAD = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
}

PARSER_BEGIN(ParseCpsl)

package ca.umontreal.iro.rali.gate.jape.parser;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.regex.*;
import gate.util.*;
import gate.*;
import ca.umontreal.iro.rali.gate.jape.*;
import gate.event.*;


/**
  * A parser for the CPSL language. Generated using JavaCC.
  * @author Hamish Cunningham
  */
public class ParseCpsl implements JapeConstants {

  /** Construct from a URL and an encoding
    */
  public ParseCpsl(URL url, String encoding) throws IOException {
    this(url, encoding, new HashMap());
  }

  /** Construct from a URL and an encoding
    */
  public ParseCpsl(URL url, String encoding, HashMap existingMacros) throws IOException {
    this(new InputStreamReader(
           new BufferedInputStream(url.openStream()),
           encoding));
    macrosMap = existingMacros;
    baseURL = url;
    this.encoding = encoding;
  }

  //StatusReporter Implementation
  public void addStatusListener(StatusListener listener){
    myStatusListeners.add(listener);
  }
  public void removeStatusListener(StatusListener listener){
    myStatusListeners.remove(listener);
  }
  protected void fireStatusChangedEvent(String text){
    java.util.Iterator listenersIter = myStatusListeners.iterator();
    while(listenersIter.hasNext())
      ((StatusListener)listenersIter.next()).statusChanged(text);
  }

  private transient java.util.List myStatusListeners = new java.util.LinkedList();

  /** Position of the current rule */
  private int ruleNumber;

  /** A list of all the bindings we made this time, for checking
    * the RHS during parsing.
    */
  private HashSet bindingNameSet = null;

  /** A table of macro definitions. */
  private HashMap macrosMap;

  URL baseURL;
  String encoding;


} // class ParseCpsl

PARSER_END(ParseCpsl)


///////////////////
// lexical analysis
///////////////////

////////////////
// utility stuff

<DEFAULT> TOKEN: {
  <#space: ("\n" | "\r" | "\t" | "\f" | " ")>
}
<DEFAULT> TOKEN: { <#spaces: ("\n" | "\r" | "\t" | "\f" | " ")+> }
<DEFAULT> TOKEN: { <#newline: ("\n" | "\r" | "\n\r" | "\r\n")> }
<DEFAULT> TOKEN: { <#digits: (["0"-"9"])+> }
<DEFAULT> TOKEN: { <#letter: ["A"-"Z", "a"-"z"]> }
<DEFAULT> TOKEN: { <#letters: (["A"-"Z", "a"-"z"])+> }
<DEFAULT> TOKEN: { <#lettersAndDigits: (["A"-"Z", "a"-"z", "0"-"9"])+> }
<DEFAULT> TOKEN: {
  <#letterOrDigitOrDash: ["A"-"Z", "a"-"z", "0"-"9", "-", "_"]>
}
<DEFAULT> TOKEN: {
  <#lettersAndDigitsAndDashes: (["A"-"Z", "a"-"z", "0"-"9", "-", "_"])+>
}

////////////////
// parsed tokens

<DEFAULT> TOKEN [IGNORE_CASE]: { <multiphase:   "Multiphase:"> }

// phases has its own lexical state so we can deal with relative paths
// pointing to grammar files
<DEFAULT> TOKEN [IGNORE_CASE]: { <phases:        "Phases:"> :IN_PHASES }
<IN_PHASES> TOKEN: {
  <path: (["A"-"Z", "a"-"z", "0"-"9", "-", "_", "/", "\\", "."])+ >
}
<IN_PHASES> SPECIAL_TOKEN: { // ignore whitespace
  <phasesWhiteSpace: (<space>)+>
}
<IN_PHASES> SPECIAL_TOKEN: { // single-line C++/Java style comments
  <phasesSingleLineCStyleComment: "//" (~["\n", "\r"])* <newline>>
}
<IN_PHASES> SPECIAL_TOKEN: { // single-line comments CPSL style
  <phasesSingleLineCpslStyleComment: ";;" (~["\n", "\r"])* <newline>>
}
<IN_PHASES> SPECIAL_TOKEN: {
  <phasesCommentStart: ("/*" | "#|")> : PHASES_WITHIN_COMMENT
}
<PHASES_WITHIN_COMMENT> MORE: { <phasesCommentChars: ~[]> }
<PHASES_WITHIN_COMMENT> SPECIAL_TOKEN: {
  <phasesCommentEnd: ("*/" | "|#")> : IN_PHASES
}

<DEFAULT> TOKEN [IGNORE_CASE]: { <phase:        "Phase:"> }
<DEFAULT> TOKEN [IGNORE_CASE]: { <input:        "Input:"> }
<DEFAULT> TOKEN [IGNORE_CASE]: { <option:       "Options:"> }
<DEFAULT> TOKEN [IGNORE_CASE]: { <rule:         "Rule:"> }
<DEFAULT> TOKEN [IGNORE_CASE]: { <macro:         "Macro:"> }
<DEFAULT> TOKEN [IGNORE_CASE]: { <priority:     "Priority:"> }
<DEFAULT> TOKEN: { <pling: "!"> }
<DEFAULT> TOKEN: { <kleeneOp: "*" | "+" | "?"> }
<DEFAULT> TOKEN: { <attrOp: "==" | "!=" | ">" | "<" | ">=" | "<=" | "=~" | "!~"> }
<DEFAULT> TOKEN: { <integer: ( ["0"-"9"] )+ > }


//starts a string
   MORE:
   {
      "\"" : IN_STRING
   }

//reads the contents of the string
   <IN_STRING> MORE :
   {
      "\\n"  { image.setLength(image.length() - 2); image.append("\n"); }
    |
      "\\r"  { image.setLength(image.length() - 2); image.append("\r"); }
    |
      "\\t"  { image.setLength(image.length() - 2); image.append("\t"); }
    |
      "\\\""  { image.setLength(image.length() - 2); image.append("\""); }
    |
      < ~["\""] >  // Note that here you don't need any action.
   }

//finishes the string
   <IN_STRING> TOKEN :
   {
      <string : "\"" >
      {
        // image.setLength(image.length() - 1);
         matchedToken.image = image.toString();
      } : DEFAULT
   }

<DEFAULT> TOKEN: { <bool: "true" | "false" > }
<DEFAULT> TOKEN: { <ident: <letter> (<letterOrDigitOrDash>)* > }
<DEFAULT> TOKEN: {
  <floatingPoint:
      (["0"-"9"])+ "." (["0"-"9"])* (<exponent>)? (["f","F","d","D"])?
    | "." (["0"-"9"])+ (<exponent>)? (["f","F","d","D"])?
    | (["0"-"9"])+ <exponent> (["f","F","d","D"])?
    | (["0"-"9"])+ (<exponent>)? ["f","F","d","D"]
  >
}
<DEFAULT> TOKEN: { <#exponent: ["e","E"] (["+","-"])? (["0"-"9"])+ > }
<DEFAULT> TOKEN: { <colon: ":"> }
<DEFAULT> TOKEN: { <semicolon: ";"> }
<DEFAULT> TOKEN: { <period: "."> }
<DEFAULT> TOKEN: { <bar: "|"> }
<DEFAULT> TOKEN: { <comma: ","> }
<DEFAULT> TOKEN: { <leftBrace: "{"> }
<DEFAULT> TOKEN: { <rightBrace: "}"> }
<DEFAULT> TOKEN: { <leftBracket: "("> }
<DEFAULT> TOKEN: { <rightBracket: ")"> }
<DEFAULT> TOKEN: { <assign: "="> }
<DEFAULT> TOKEN: { <colonplus: ":+"> }
/*<DEFAULT> SPECIAL_TOKEN: { // catch all for Java block processing
  <other: (~[])>
}*/

////////////////////
// non-parsed tokens

// we make comments and spaces special tokens to support an editor
<DEFAULT> SPECIAL_TOKEN: { // ignore whitespace
  <whiteSpace: (<space>)+>
}
<DEFAULT> SPECIAL_TOKEN: { // single-line C++/Java style comments
  <singleLineCStyleComment: "//" (~["\n", "\r"])* <newline>>
}
<DEFAULT> SPECIAL_TOKEN: { // single-line comments CPSL style
  <singleLineCpslStyleComment: ";;" (~["\n", "\r"])* <newline>>
}
<DEFAULT> SPECIAL_TOKEN: { <commentStart: ("/*" | "#|")> : WITHIN_COMMENT }
<WITHIN_COMMENT> MORE: { <commentChars: ~[]> }
<WITHIN_COMMENT> SPECIAL_TOKEN: { <commentEnd: ("*/" | "|#")> : DEFAULT }

<DEFAULT> TOKEN: { // catch all for Java block processing
  <other: (~[])>
}


//////////////
// the grammar
//////////////

MultiPhaseTransducer MultiPhaseTransducer() :
{
  // macrosMap = new HashMap();
  SinglePhaseTransducer s = null;
  MultiPhaseTransducer m = new MultiPhaseTransducer();
  m.setBaseURL(baseURL);
  Token mptNameTok = null;
  Token phaseNameTok = null;
}
{
  // transducer name
  (
    <multiphase> mptNameTok=<ident>
    { m.setName(mptNameTok.image); }
  )?

  // spts
  (
    // sptrannies in this file
    ( s=SinglePhaseTransducer() {
      m.addPhase(s.getName(), s);
      s.setBaseURL(baseURL);
     } )+
    |
    // sptrannies in external files
    (
      <phases>
      (
        phaseNameTok=<path>
        {
          ParseCpsl parser = null;

            // check file exists
            String sptPath = phaseNameTok.image + ".jape";
            URL sptURL = null;
            try{
              sptURL = new URL(baseURL, sptPath);
            }catch(MalformedURLException mue){
              throw(new ParseException("Read error " + mue.toString()));
            }

            if(sptURL == null){
              throw(new ParseException(
                "Resource not found: base = " + baseURL.toString() +
                " path = " + sptPath
              ));
            }

            // construct a parser and parse it
            fireStatusChangedEvent("Reading " + phaseNameTok.image + "...");
            try {
              parser = new ParseCpsl(sptURL, encoding, macrosMap);
            } catch (IOException e) {
              throw(
                new ParseException(
                  "Cannot open URL " + sptURL.toExternalForm()
                )
              );
            }

          // adding the resultant spt to m
          if(parser != null) {
            s = parser.SinglePhaseTransducer();
            if(s != null)
              m.addPhase(s.getName(), s);
          }
        } // an SPT in an external file
      )+  // external file phase identifiers
    )     // external file phases declaration
  )          // SPTs
  <EOF>
  {
    m.finish(); // swap the various JGL types for Java arrays
    return m;
  }

} // MultiPhaseTransducer


SinglePhaseTransducer SinglePhaseTransducer() :
{
  ruleNumber = 0;
  Token phaseNameTok = null;
  Token inputTok = null;
  SinglePhaseTransducer t = null;
  Rule newRule = null;
  bindingNameSet = new HashSet();
  Token optionNameTok = null;
  Token optionValueTok = null;
  Object newMacro = null;
}
{
  <phase> phaseNameTok=<ident>
  { t = new SinglePhaseTransducer(phaseNameTok.image); }

  (
    <input>
    (inputTok = <ident> {t.addInput(inputTok.image);})*
  )?

  (
    <option>
    (
      optionNameTok=<ident> <assign> (optionValueTok=<ident> |
                                      optionValueTok=<bool>)
      {
        t.setOption(optionNameTok.image, optionValueTok.image);

        // control
        if(optionNameTok.image.equalsIgnoreCase("control")) {
          if(optionValueTok.image.equalsIgnoreCase("appelt"))
            t.setRuleApplicationStyle(APPELT_STYLE);
          else if(optionValueTok.image.equalsIgnoreCase("first"))
            t.setRuleApplicationStyle(FIRST_STYLE);
          else if(optionValueTok.image.equalsIgnoreCase("brill"))
            t.setRuleApplicationStyle(BRILL_STYLE);
          else if(optionValueTok.image.equalsIgnoreCase("once"))
            t.setRuleApplicationStyle(ONCE_STYLE);
          else
            System.err.println(
              "ignoring unknown control strategy " + option +
              " (should be brill, appelt or first)"
            );
        } // control
        else if(optionNameTok.image.equalsIgnoreCase("debug")) {
          if(optionValueTok.image.equalsIgnoreCase("true") ||
             optionValueTok.image.equalsIgnoreCase("yes") ||
             optionValueTok.image.equalsIgnoreCase("y"))
            t.setDebugMode(true);
          else t.setDebugMode(false);
        }
      }
    )*
  )?

  (
    ( newRule=Rule(phaseNameTok.image) { t.addRule(newRule); } )
    |
    MacroDef()
  )*
  {
    if(ruleNumber == 0)
      throw(new ParseException("no rules defined in transducer "
                               + t.getName()));
    t.finish(); // swap the various JGL types for Java arrays
    t.setBaseURL(baseURL);
    return t;
  }

} // SinglePhaseTransducer


Rule Rule(String phaseName) :
{
  Token ruleNameTok = null;
  String ruleName = null;
  Token priorityTok = null;
  int rulePriority = 0;
  LeftHandSide lhs = null;
  RightHandSide rhs = null;
  Rule newRule = null;
}
{
  <rule> ruleNameTok=<ident> { ruleName=ruleNameTok.image; }
  (
    <priority> priorityTok=<integer>
    {
      try { rulePriority=Integer.parseInt(priorityTok.image); }
      catch(NumberFormatException e) {
        System.err.println("bad priority spec(" + priorityTok.image +
                           "), rule(" + ruleName + ") - treating as 0");
        rulePriority=0;
      }
    }
  )?

  lhs=LeftHandSide() "-->" rhs=RightHandSide(phaseName, ruleName, lhs)
  {
    try { rhs.createActionClass(); } catch(JapeException e)
    {
      /*Debug.pr(
        this, "ParseCpsl.Rule, FAILED rhs: " + rhs.getActionClassString()
      );*/
      throw new ParseException("couldn't create rule RHS: " + e.toString());
    }
    /*Debug.pr(this, "ParseCpsl.Rule, done rhs: " + rhs.getActionClassString());*/
    newRule = new Rule(ruleName, ruleNumber, rulePriority, lhs, rhs);
    ruleNumber++;
    return newRule;
  }
} // Rule


void MacroDef() :
{
  Token macroNameTok = null;
  Object body = null;
}
{
  <macro> macroNameTok=<ident>
  (
    LOOKAHEAD(2) // both blocks and PEs may start with "{"
    body=PatternElement(null)
    |
    body=Action()
  )
  {
    macrosMap.put(macroNameTok.image, body);
  }
} // MacroDef


LeftHandSide LeftHandSide() :
{
  ConstraintGroup cg = new ConstraintGroup();
  LeftHandSide lhs = new LeftHandSide(cg);
}
{
  ConstraintGroup(lhs, cg)
  { return lhs; }

} // LeftHandSide


// we pass the lhs down so we can add bindings in CPEs, and the cg
// so we can add PEs and create disjunctions here
void ConstraintGroup(LeftHandSide lhs, ConstraintGroup cg) :
{
  PatternElement pat = null;
}
{
  ( pat=PatternElement(lhs) { cg.addPatternElement(pat); } )+
  (
    <bar> { cg.createDisjunction(); }
    ( pat=PatternElement(lhs) { cg.addPatternElement(pat); } )+
  )*

} // ConstraintGroup


PatternElement PatternElement(LeftHandSide lhs) :
{
  PatternElement pat = null;
  Token macroRefTok = null;
  boolean macroRef = false;
}
{
  (
    macroRefTok=<ident> // macro reference
    {
      macroRef = true;
      Object macro = macrosMap.get(macroRefTok.image);
      if(macro == null)
        throw(new ParseException("unknown macro name " + macroRefTok.image));
      else if(macro instanceof String[])
        throw(
          new ParseException(
            "macro " + macroRefTok.image +
            " references an Action, not a PatternElement"
          )
        );
      else if(! (macro instanceof PatternElement)) // this should never happen
        throw(
          new ParseException(
            "macro " + macroRefTok.image +
            " doesn't reference a PatternElement!"
          )
        );
      else { // macro is a pattern element
        pat = (PatternElement) ((PatternElement) macro).clone();
      }
    }
    |
    pat=BasicPatternElement()
    |
    pat=ComplexPatternElement(lhs)
    // |
    // pat=FunctionCallPatternElement()
  )
  {
    // if its a CPE, make binding into the LHS
    if(pat instanceof ComplexPatternElement) {

      String bindingName = ((ComplexPatternElement) pat).getBindingName();

      if(bindingName != null && lhs != null) {

        try {
          lhs.addBinding(
            bindingName, (ComplexPatternElement) pat, bindingNameSet, macroRef
          );
        } catch(JapeException e) {
          System.err.println(
            "duplicate binding name " + bindingName +
            " - ignoring this binding! exception was: " + e.toString()
          );
        }

      } // not null binding or lhs
    } // its a CPE

    return pat;
  }

} // PatternElement


BasicPatternElement BasicPatternElement() :
{
  Token shortTok = null; // string shorthand token
  ArrayList constraints = new ArrayList();
  Token constrTok = null;
  Constraint c = null;
  BasicPatternElement bpe = new BasicPatternElement();
}
{
  (
    (
      // conventional syntax
      <leftBrace> c=Constraint() { bpe.addConstraint(c); }
      (
        <comma> c=Constraint() { bpe.addConstraint(c); }
      )* <rightBrace>
    )
    |
    (
      // string shorthand
      shortTok=<string>
    )
    {
      System.err.println(
        "string shorthand not supported yet, ignoring: " + shortTok.image
      );
    }
  )
  { return bpe; }

} // BasicPatternElement


ComplexPatternElement ComplexPatternElement(LeftHandSide lhs) :
{
  Token kleeneOpTok = null;
  Token bindingNameTok = null;
  ConstraintGroup cg = new ConstraintGroup();
}
{
  <leftBracket> ConstraintGroup(lhs, cg) <rightBracket>
  (kleeneOpTok=<kleeneOp>)?
  ( <colon> ( bindingNameTok=<ident> | bindingNameTok=<integer> ) )?
  {
    int kleeneOp = NO_KLEENE_OP;
    if(kleeneOpTok != null) {
      String k = kleeneOpTok.image;
      if(k.equals("*"))         kleeneOp = KLEENE_STAR;
      else if(k.equals("?"))    kleeneOp = KLEENE_QUERY;
      else if(k.equals("+"))    kleeneOp = KLEENE_PLUS;
      else
        System.err.println("ignoring uninterpretable Kleene op " + k);
    }

    String bindingName = null;
    if(bindingNameTok != null)
      bindingName = bindingNameTok.image;
    return new ComplexPatternElement(cg, kleeneOp, bindingName);
  }

} // ComplexPatternElement


Constraint Constraint() :
{
  Token annotTypeTok = null;
  Token attrNameTok = null;
  Token opTok = null;
  Object attrValObj = null;
  Pair attrValPair = null;
  boolean negate = false;
  Constraint c = null;
  int opInt = -1;
}
{
  // negation
  (<pling> { negate = true; } )?

  // the annotation type
  annotTypeTok=<ident>
  {
    c = new Constraint(annotTypeTok.image);
    if(negate) c.negate();
  }

  // optional attribute value with comparison operator
  (
    <period> attrNameTok=<ident> opTok=<attrOp> attrValPair=AttrVal()
    {
      attrValObj = attrValPair.second;
      if (opTok.image.equals("=="))       opInt = EQUAL;
      if (opTok.image.equals("!="))      {opInt = EQUAL; c.changeSign();}
      if (opTok.image.equals(">"))        opInt = GREATER;
      if (opTok.image.equals("<"))        opInt = LESSER;
      if (opTok.image.equals(">="))       opInt = GREATER_OR_EQUAL;
      if (opTok.image.equals("<="))       opInt = LESSER_OR_EQUAL;
      if (opTok.image.equals("=~"))       opInt = REGEXP;
      if (opTok.image.equals("!~"))      {opInt = REGEXP; c.changeSign();}

      // for efficiency, compile the regexp pattern only once right now
      if (opInt == REGEXP || opInt == NOT_REGEXP) {

	// first check that the regexp is a string
	if (((Integer)attrValPair.first).intValue() == string) {
	  try {
            attrValObj = Pattern.compile((String) attrValObj);
            c.addAttribute(new JdmAttribute(attrNameTok.image, attrValObj, opInt));
          }
	  catch (PatternSyntaxException pse) {
	    System.err.println("Malformed regular expression: \""+pse.getPattern());
            System.err.println("PatternSyntaxException says: "+pse.getMessage());
          }
        }
        else {
          System.out.println("regular expression \""+attrValObj+"\" for pattern matching (\"=~\" or \"!~\") should be a string between double quotes. Ignored."); 
        }
      }
      // for operators other than pattern matching   
      else {
        c.addAttribute(new JdmAttribute(attrNameTok.image, attrValObj, opInt));
      }
    }
  )?

  // return value
  {
    return c;
  }
} // Constraint


// attribute values: strings, identifers (=strings), integers, floats,
//                   booleans
Pair AttrVal() :
{
  Token attrValTok = null;
  Pair val = new Pair();
}
{
  (
    attrValTok=<string> | attrValTok=<ident> |
    attrValTok=<integer> | attrValTok=<floatingPoint> |
    attrValTok=<bool>
  )
  {
    val.first = new Integer(attrValTok.kind);

    switch(attrValTok.kind) {
      case string:
        // strip the quotes
        val.second
          = attrValTok.image.substring(1, attrValTok.image.length() - 1);
        break;
      case integer:
        try {
          val.second = Long.valueOf(attrValTok.image);
        } catch(NumberFormatException e) {
          System.err.println("couldn't parse integer " +
                             attrValTok.image + " - treating as 0");
          val.second = new Long(0);
        }
        break;
      case ident:
        val.second = new String(attrValTok.image);
        break;
      case bool:
        val.second = Boolean.valueOf(attrValTok.image);
        break;
      case floatingPoint:
        try {
          val.second = Double.valueOf(attrValTok.image);
        } catch(NumberFormatException e) {
          System.err.println("couldn't parse float " +
                             attrValTok.image + " - treating as 0.0");
          val.second = new Double(0.0);
        }
        break;
      default:
        System.err.println(
          "didn't understand type of " + attrValTok.image + ": ignoring"
        );
        val.second = new String("");
        break;
    } // switch

    return val;
  }
}


RightHandSide RightHandSide(
  String phaseName, String ruleName, LeftHandSide lhs
) :
{
  String[] block = new String[2];
  RightHandSide rhs = new RightHandSide(phaseName, ruleName, lhs);
}
{
  block=Action() {
    // did we get a non-existent block name?
    if(block[0] != null)
      if(! bindingNameSet.contains(block[0])) {
        throw(new ParseException("unknown label in RHS action: " + block[0]));
      }
    rhs.addBlock(block[0], block[1]);
  }
  (
    <comma> block=Action() {
      // did we get a non-existent block name?
      if(block[0] != null)
        if(! bindingNameSet.contains(block[0])) {
          throw(new ParseException("unknown label in RHS action: " + block[0]));
        }
      rhs.addBlock(block[0], block[1]);
    }
  )*
  {
    return rhs; /* action class not created yet */
  }

} // RightHandSide


// actions return 2 strings, one for the name of the block, and
// one for the block itself. if the name is null, it is an anonymous block
String[] Action() :
{
  String[] block = new String[2];
  Token macroRefTok = null;
}
{
  (
    // both named blocks and assignments start with ":"<ident>, so:
    LOOKAHEAD(3)

      block=NamedJavaBlock()
    | block=AnonymousJavaBlock()
    | block=AssignmentExpression()
    | macroRefTok=<ident> // macro reference
    {
      Object macro = macrosMap.get(macroRefTok.image);
      if(macro == null)
        throw(new ParseException("unknown macro name " + macroRefTok.image));
      else if(macro instanceof PatternElement)
        throw(
          new ParseException(
            "macro " + macroRefTok.image +
            " references a PatternElement, not an Action"
          )
        );
      else if(! (macro instanceof String[])) // this should never happen
        throw(
          new ParseException(
            "macro " + macroRefTok.image + " doesn't reference an Action!"
          )
        );
      else { // macro is an action
        block = (String[]) macro;
      }
    } // macro reference
  )
  {
    return block;
  }

} // Action


String[] NamedJavaBlock() :
{
  String[] block = new String[2];
  Token nameTok = null;
}
{
  <colon> nameTok=<ident> { block[0] = nameTok.image; }
  <leftBrace> block[1]=ConsumeBlock()
  { return block; }

} // NamedJavaBlock


String[] AnonymousJavaBlock() :
{
  String[] block = new String[2];
  block[0] = null; // no name
}
{
  <leftBrace> block[1]=ConsumeBlock()
  { return block; }

} // AnonymousJavaBlock


String[] AssignmentExpression() :
{
  String[] block = new String[2];
  StringBuffer blockBuffer = new StringBuffer();
  boolean simpleSpan = true;
  Token nameTok = null;
  String newAnnotType = null;
  String newAttrName = null;
  String nl = Strings.getNl();
  String annotSetName = null;
  Pair attrVal = null;
  String existingAnnotSetName = null;
  String existingAnnotType = null;
  String existingAttrName = null;

  blockBuffer.append("// RHS assignment block" + nl);
  blockBuffer.append(
    "      FeatureMap features = Factory.newFeatureMap();" + nl
  );
}
{
  // the simple/composite span spec
  (
    <colon> { simpleSpan = true; }
  |
    // we no longer support multi-span, as there is no such thing as a
    // multi-span annotation any more...
    <colonplus> {
      simpleSpan = false;
      throw new
        ParseException(":+ not a legal operator (no multi-span annots)");
    }
  )

  // the name of the bound annotation set we're referencing
  nameTok=<ident> {
    block[0] = nameTok.image;
    annotSetName = block[0] + "Annots";
  }

  // the type of the new annotation we want to create
  <period> nameTok=<ident>
  {
    newAnnotType = nameTok.image;
    blockBuffer.append(
      "      String newAnnotType = \"" + newAnnotType + "\";" + nl
    );

    // start of the attribute stuff
    blockBuffer.append("      Object val = null;" + nl);
  }

  // equals sign, and the opening brace of the assignments list
  <assign> <leftBrace>

  // a list of attribute assignments
  (

    // the name of the attribute, and equals sign
    nameTok=<ident> <assign> { newAttrName = nameTok.image; }

    // the value to assign
    (
      // a static attribute value
      attrVal=AttrVal()
      {
        switch(((Integer) attrVal.first).intValue()) {
          case string:
            blockBuffer.append(
              "      val = new String(\"" + attrVal.second.toString() +
              "\");" + nl
            );
            break;
          case integer:
            blockBuffer.append("      try { " +
              "val = new Long(" + attrVal.second.toString() + "); }" +
              nl + "      catch(NumberFormatException e) { }" + nl
            );
            break;
          case ident:
            blockBuffer.append(
              "      val = new String(\"" + attrVal.second.toString() +
              "\");" + nl
            );
            break;
          case bool:
            blockBuffer.append(
              "      val = new Boolean(\"" +
              attrVal.second.toString() + "\");" + nl
            );
            break;
          case floatingPoint:
            blockBuffer.append("      try { " +
              "val = new Double(" + attrVal.second.toString() + "); }" + nl +
              "      catch(NumberFormatException e) { }" + nl
            );
            break;
          default:
            blockBuffer.append(
              "      val = new String(\"\");" + nl
            );
            break;
        } // switch

        blockBuffer.append("      features.put(\"" + newAttrName + "\", val);");
        blockBuffer.append(nl);
      } // a static attribute value

    |

      // reference to existing annotation(s)
      (
        <colon> nameTok=<ident> {
          existingAnnotSetName = nameTok.image + "ExistingAnnots";
          if(! bindingNameSet.contains(nameTok.image))
            throw(
              new ParseException(
                "unknown label in RHS action(2): " + nameTok.image
              )
            );

          blockBuffer.append(
            "      { // need a block for the existing annot set" + nl +
            "        AnnotationSet " + existingAnnotSetName +
            " = (AnnotationSet)bindings.get(\"" + nameTok.image + "\"); " + nl
          );
        }
        <period> nameTok=<ident> { existingAnnotType = nameTok.image; }
        <period> nameTok=<ident> { existingAttrName = nameTok.image; }

        // for each existingAnnotType annotation in existingAnnotSetAnnots
        //   if there is an attribute with existingAttrName
        //   add a new attribute copied from that one
        {
          blockBuffer.append(
"        AnnotationSet existingAnnots = " + nl +
"        " + existingAnnotSetName + ".get(\"" + existingAnnotType + "\");" + nl +
"        Iterator iter = existingAnnots.iterator();" + nl +
"        while(iter.hasNext()) {" + nl +
"          Annotation existingA = (Annotation) iter.next();" + nl +
"          Object existingFeatureValue = existingA.getFeatures().get(\"" +
existingAttrName + "\");" + nl +
"          if(existingFeatureValue != null) {" + nl +
"            features.put(\"" + existingAttrName + "\", existingFeatureValue);" + nl +
"            break;" + nl +
"          }" + nl + "        } // while" + nl +
"      } // block for existing annots" + nl
          );
        }
      ) // end of reference to existing annotation(s)

    ) // end of the value to assign

    (<comma>)? // yes, I've allowed redundant trailing commas on this one

  )* // attr assignments list

  // the closing brace
  <rightBrace>

  // all done
  {
    blockBuffer.append("      annotations.add(" + nl);
    blockBuffer.append("        " + annotSetName + ".firstNode(), ");
    blockBuffer.append(annotSetName + ".lastNode(), " + nl);
    blockBuffer.append("        \"" + newAnnotType + "\", features" + nl);
    blockBuffer.append("      );" + nl);
    blockBuffer.append("      // end of RHS assignment block");
    block[1] = blockBuffer.toString();
    return block;
  }

} // AssignmentExpression


JAVACODE
String ConsumeBlock() {
  StringBuffer block = new StringBuffer(); // to collect the block in
  int nesting = 1; // the first "{" was consumed before we were called

  // step through the code until the final brace
  while(nesting != 0) {
    Token nextTok = getNextToken();

    // add in any preceding spaces and comments
    // for some bizzare reason, this misses the comments...
    if(nextTok.specialToken != null) {
      Token special = nextTok.specialToken;
      while(special != null) {
        /*Debug.pr(
          this, "ParseCpsl.ConsumeBlock: special.image = " + special.image
        );*/
        block.append(special.image);
        special = special.next;
      }
    }

    // adjust nesting
    if(nextTok.image.equals("{")) {
      nesting++;
      /*Debug.pr(this, "ParseCpsl.ConsumeBlock: nesting = " + nesting);*/
    } else if(nextTok.image.equals("}")) {
      nesting--;
      /*Debug.pr(this, "ParseCpsl.ConsumeBlock: nesting = " + nesting);*/
    }

    // add the image to the block string (but not the final "}")
    if(nesting > 0)
      block.append(nextTok.image);
    /*Debug.pr(this, "ParseCpsl.ConsumeBlock: nextTok.image = ^" +
             nextTok.image + "^");*/

  } // while

  /*Debug.pr(this, "ParseCpsl.ConsumeBlock: block = " + block.toString());*/
  return block.toString();
} // ConsumeBlock


